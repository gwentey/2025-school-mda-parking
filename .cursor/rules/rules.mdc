---
description: 
globs: 
alwaysApply: true
---
Tu es un dÃ©veloppeur full-stack expert, spÃ©cialisÃ© dans la crÃ©ation de dashboards modernes et interactifs. Ton objectif est de m'aider Ã  crÃ©er une interface de visualisation pour un projet Ã©tudiant en Master MIAGE. Le projet est basÃ© sur l'approche MDA (Model-Driven Architecture) et concerne un systÃ¨me de gestion de parking. J'ai dÃ©jÃ  les modÃ¨les PIM (un diagramme de classes UML) et le PSM a gÃ©nÃ©rÃ© des classes PHP. L'application doit Ãªtre une simulation visuelle simple, sans vraie base de donnÃ©es ni systÃ¨me de connexion.

CrÃ©e une application web monopage qui servira de tableau de bord de supervision pour un ou plusieurs parkings.

FonctionnalitÃ©s clÃ©s :

Visualisation du Parking :

Affiche un parking sous forme de grille.

Chaque case de la grille reprÃ©sente une place de parking.

Les places libres doivent Ãªtre de couleur verte.

Les places occupÃ©es doivent Ãªtre de couleur rouge.

Affiche le nom du parking et le nombre de places disponibles en temps rÃ©el.

Visualisation de la BarriÃ¨re :

Affiche une reprÃ©sentation stylisÃ©e d'une barriÃ¨re d'entrÃ©e/sortie.

La barriÃ¨re doit pouvoir Ãªtre dans deux Ã©tats : "ouverte" ou "fermÃ©e".

Le passage d'un Ã©tat Ã  l'autre doit Ãªtre visible via une animation de rotation fluide.

Panneau de ContrÃ´le :

Un panneau de contrÃ´le doit permettre de gÃ©rer la simulation.

Il contiendra deux boutons : "Ouvrir BarriÃ¨re" et "Fermer BarriÃ¨re" pour contrÃ´ler la barriÃ¨re manuellement.

Il contiendra une liste dÃ©roulante pour sÃ©lectionner le parking Ã  afficher, si plusieurs sont dÃ©finis dans les donnÃ©es.

Gestion des DonnÃ©es (Simulation) :

Pas de base de donnÃ©es. Utilise un simple tableau (array) PHP en haut du fichier pour simuler les donnÃ©es.

Ce tableau contiendra les informations pour plusieurs parkings (ex: 'Parking Sorbonne', 'Parking PanthÃ©on').

Pour chaque parking, on doit trouver son nom, et une liste de places avec leur Ã©tat ('libre' ou 'occupee').

Partie 3 : Exigences Techniques et Design (Implementation & Style)
On prÃ©cise ici la technologie et le style visuel attendu.

Prompt (suite) : "

Stack Technique :

Backend : PHP. Tout le code (PHP, HTML, CSS, JS) doit Ãªtre dans un unique fichier pour simplifier.

Frontend : HTML5, JavaScript (pour l'interactivitÃ© des boutons et de la barriÃ¨re).

Styling : Utilise le framework Tailwind CSS (via CDN) pour la structure gÃ©nÃ©rale et le design.

Exigences de Design :

ThÃ¨me : Moderne, Ã©purÃ© (flat design), avec un fond sombre pour le tableau de bord.

Layout : L'interface doit Ãªtre centrÃ©e. La visualisation du parking et le panneau de contrÃ´le doivent Ãªtre disposÃ©s cÃ´te Ã  cÃ´te sur les grands Ã©crans, et l'un en dessous de l'autre sur mobile (responsive).

Composants : Les conteneurs pour le parking et les contrÃ´les doivent ressembler Ã  des "widgets" de dashboard, avec des coins arrondis et une lÃ©gÃ¨re ombre portÃ©e pour leur donner du relief.

Boutons : Les boutons de contrÃ´le de la barriÃ¨re ne doivent pas Ãªtre les boutons par dÃ©faut de Tailwind. CrÃ©e des boutons personnalisÃ©s avec un design attractif : dÃ©gradÃ©s subtils, icÃ´nes (si possible via SVG), et des effets de survol (hover) marquÃ©s.

Typographie : Utilise une police sans-serif moderne et lisible, comme 'Inter' de Google Fonts."

Le data context : 

ğŸ”¸ Parking
Champ	Type	ClÃ©
idParking	int	PK
nbPlaces	int	
adresse	string	

ğŸ”¸ Place
Champ	Type	ClÃ©
numPlace	int	PK
etat	bool	
idParking	int	FK â†’ Parking(idParking)

ğŸ”¸ Conducteur
Champ	Type	ClÃ©
idConducteur	int	PK
immatriculation	string	

ğŸ”¸ Ticket
Champ	Type	ClÃ©
idTicket	int	PK
dateHeureEntree	DateTime	
dateHeureSortie	DateTime	
montant	float	
paye	bool	
idConducteur	int	FK â†’ Conducteur(idConducteur)
idParking	int	FK â†’ Parking(idParking)

ğŸ”¸ Paiement
Champ	Type	ClÃ©
idPaiement	int	PK
dateHeure	DateTime	
montant	float	
mode	string	
idTicket	int	FK â†’ Ticket(idTicket)

ğŸ”¸ Tarification
Champ	Type	ClÃ©
id	int	PK
tarifHoraire	float	
dureeGratuite	float	
idParking	int	FK â†’ Parking(idParking)

ğŸ”¸ Barriere
Champ	Type	ClÃ©
idBarriere	int	PK
etat	bool	
type	string	
idParking	int	FK â†’ Parking(idParking)

ğŸ”¸ Incident
Champ	Type	ClÃ©
idIncident	int	PK
nom	string	
description	string	
idTicket	int	FK â†’ Ticket(idTicket)
idOperateur	int	FK â†’ Operateur(idOperateur)

ğŸ”¸ Operateur
Champ	Type	ClÃ©
idOperateur	int	PK
nom	string	

prenom	string